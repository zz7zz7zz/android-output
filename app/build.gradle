apply plugin: 'com.android.application'

//bug修复,使用buildSrc开发
com.module.plugin.fix.FixPlugin.main()
apply plugin: 'com.module.plugin.fix'

//加固插件,使用module开发
apply plugin: 'com.module.plugin.strengthen'
strengthen{
    userName 'Yang'
    passWord 'LongHui'
}

//bug修复2,使用Groovy开发
apply plugin: 'com.module.plugin.fix2'

//使用自定义的AspectJ插件
apply plugin: 'com.module.plugin.aspectj'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "com.open.test"
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //MVVM 配置
    dataBinding{
        enabled = true
    }

    ndkVersion '22.1.7171670'
}

dependencies {
    implementation project(path: ':app_bug_8_0')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'androidx.appcompat:appcompat:1.0.0'
    compile 'androidx.constraintlayout:constraintlayout:1.1.3'
    testCompile 'junit:junit:4.12'
    androidTestCompile 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestCompile 'androidx.test.ext:junit:1.1.1'
    androidTestCompile 'androidx.annotation:annotation:1.0.0'
    compile 'androidx.recyclerview:recyclerview:1.0.0'
    compile project(':lib_widgets')
    compile project(path: ':net_socket_client')

//    implementation("com.squareup.okhttp3:okhttp:3.11.0")
//    dependencies {
        // Retrofit & OkHttp
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
//    }

    implementation("com.github.bumptech.glide:glide:4.9.0")
    implementation 'io.reactivex.rxjava2:rxjava:2.0.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    implementation "org.reactivestreams:reactive-streams:1.0.2"
    implementation "androidx.room:room-runtime:2.3.0-alpha01"
    annotationProcessor "androidx.room:room-compiler:2.3.0-alpha01"

    implementation "android.arch.lifecycle:livedata:1.1.1"

//    implementation 'com.github.markzhai:blockcanary-android:1.5.0'
    // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
    debugCompile 'com.github.markzhai:blockcanary-android:1.5.0'
    releaseCompile 'com.github.markzhai:blockcanary-no-op:1.5.0'

    implementation project(path: ':lib_permission')
    implementation 'org.aspectj:aspectjrt:1.9.1'

    implementation 'com.tencent:mmkv-static:1.2.8'
    implementation 'com.getkeepsafe.relinker:relinker:1.4.3'
}

//gradle执行会解析build.gradle文件，afterEvaluate表示在解析完成之后会执行我们的代码
afterEvaluate{


}

//
///**
// * aspectjrt 编译相关
// */
//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main
//
//final def log = project.logger
//final def variants = project.android.applicationVariants
//
//// 在构建工程时，执行编辑
//variants.all { variant ->
//
////    if (!variant.buildType.isDebuggable()) {
////        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
////        return;
////    }
//    println("------------------ 执行编译1 ------------------")
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        println("------------------ 执行编译2 ------------------")
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
//        log.debug "ajc args: " + Arrays.toString(args)
//
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler);
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                    log.warn message.message, message.thrown
//                    break;
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}